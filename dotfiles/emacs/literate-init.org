#+property: header-args :tangle "init.el"
#+startup: content indent

* Understanding this file
This configuration is a literate org-mode file which gets tangled (=C-c C-v t=) to =init.el=.

For quick evaluation (without running =nh os switch=), tangle it, navigate to =init.el= and evaluate it in-situ (=C-c C-e=).
* Pre-config
Startup optimizations, mostly stolen from [[https://emacs.stackexchange.com/questions/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][this stackexchange question]]
#+begin_src emacs-lisp
  (setq gc-cons-threshold-original gc-cons-threshold)
  (setq gc-cons-threshold (* 1024 1024 100))
#+end_src

* Proper configuration
Most of these were originally taken from [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][System crafter]]'s configuration.

** Disabled
These options, I'm torn on; for now, they are off.
#+begin_src emacs-lisp :tangle no
  (setq visible-bell t)   ; Make the flashing visible, like when scrolling up when at the top
  (global-hl-line-mode 1) ; Highlight current line
#+end_src

(This bit is untested)
#+begin_src emacs-lisp :tangle no
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("emacs-lisp"))))

  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Enabled
*** Basics constants and modes
#+begin_src emacs-lisp
  (tool-bar-mode -1)   
  (menu-bar-mode -1)   
  (scroll-bar-mode -1) 

  (global-display-line-numbers-mode 1)  
  (setq display-line-numbers 'relative) 
  (setq column-number-mode t)           
  (recentf-mode 1) ; Remember recent files (enables M-x recentf-open-files)
  (setq recentf-max-menu-items 25)

  (setq inhibit-startup-screen t)
  (setq history-length 50) ; Only remember the last 50 files opened (for startup performance)
  (savehist-mode 1)        ; Remember what is typed into minibuffer. enables M-n (next-history-element) and M-p (previous-history-element)
  (save-place-mode 1)      ; Don't forget point when file is closed
  (rainbow-mode 1)         ; Enable showing colors for hexcolors like (#ed8796)

  (overwrite-mode -1)      ; Disble overwrite mode so that text editing actually works
  ;(global-origami-mode 1)  ; Enable folding (BREAKS EMACSCLIENT BECAUSE OF [FONT]??? AAAAAAAAAAA)

  (global-prettify-symbols-mode 1)

  ;; Move autosaves away from the directory
  (setq backup-directory-alist `(("." . "~/.config/emacs/autosaves")))
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  ;; Move customization variables to a separate file and load it so that emacs doesn't pollute init.el
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)


  ;; Don't pop up UI dialogs when prompting (for staying on the keyboard)
  (setq use-dialog-box nil)

  ;; Automatic equivalent to vim `:checktime`
  (global-auto-revert-mode 1)
  (setq auto-revert-use-notify t)
  (setq auto-revert-verbose t)

  ;; Same as above for Dired and such
  (setq global-auto-revert-non-file-buffers t)

  (eval-after-load "dired"
    '(progn
       (setq dired-dwim-target 'dired-dwim-target-recent)
       (define-key dired-mode-map (kbd "-") 'dired-up-directory)))

  (define-key lisp-interaction-mode-map (kbd "C-x e") 'eval-print-last-sexp)
  (define-key emacs-lisp-mode-map (kbd "C-x e") 'eval-print-last-sexp)

  (global-set-key (kbd "M-c") 'calc)

  (setq helm-move-to-line-cycle-in-source t)
  (helm-mode 1)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  ;(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings) ;temporarily off

  ;; Scrolling in general
  (setq scroll-preserve-screen-position 't)
  (setq next-screen-context-lines 15)

  ;; Set {term, ansi-term}'s default shell to be correct
  (ignore-errors
    (setq shell-file-name (car (process-lines "which" "zsh"))))

  ;; Set sane defaults for re-builders (emacs has a built-in regex builder it's so cool)
  (require 're-builder)
  (setq reb-re-syntax 'string)

  ;; Otherwise, the minibuffer breaks :/
  (add-hook 'minibuffer-setup-hook (lambda () (paredit-mode 0))) 
#+end_src

The selected line number doesn't scale when the font size changes (especially noticeable in e.g. uiua)
This hacks around that (source: =M-x customize-face=)

This may be unupdated so it does NOT get tangled in.
#+begin_src emacs-lisp :tangle no
  (custom-set-faces
   '(line-number-current-line ((t (:inherit 'default)))))
  (custom-set-faces
   '(line-number ((t (:inherit 'default)))))
#+end_src

*** Evil mode
I've tried to stick with the true emacs binds, but my left wrist could not take the struggle.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)  ; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil) ; evil-collection tells me to use this if I'm using evil, so here it is
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :custom (evil-collection-setup-minibuffer t)
    :init (evil-collection-init))

  (evil-owl-mode) ; Preview registers before seeing them
  (setq evil-owl-display-method 'window)
  (setq evil-owl-idle-delay 0)


  (global-set-key (kbd "C-w") 'nil)
  (global-set-key (kbd "C-w h") 'evil-window-left)
  (global-set-key (kbd "C-w l") 'evil-window-right)
  (global-set-key (kbd "C-w k") 'evil-window-up)
  (global-set-key (kbd "C-w j") 'evil-window-down)

  (define-key evil-normal-state-map (kbd "s") 'avy-goto-char-2)
  (define-key evil-normal-state-map (kbd "C-s") 'evil-scroll-up)
#+end_src

*** Visual line set-up

Mostly described by [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]'s README 
Remember that =(setq-default visual-fill-column-center-text t)= exists! It works well when used per-buffer, however.
#+begin_src emacs-lisp
  (setq visual-line-fringe-indicators '(nil nil)) ; i don't think this does anything
  (setq visual-fill-column-enable-sensible-window-split 1)
                                          ;(advice-add 'text-scale-adjust :after #'visual-fill-column-adjust) 
  (setq visual-fill-column-width 80)              ; default is whatever fill-column is
  (add-hook 'visual-fill-column-mode #'visual-line-mode)
#+end_src

*** Aesthetics
Using =(add-to-list 'default-frame-alist)= because =set-frame-font= breaks with =emacsclient=.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Uiua386-12"))
#+end_src

*** Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-ร") 'shrink-window-horizontally)
  (global-set-key (kbd "C-c C-รง") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-c s") 'scroll-lock-mode) 
  (global-set-key (kbd "M-t") 'ansi-term) 

#+end_src

*** Programming
#+begin_src emacs-lisp
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-enable nil)                                 ; These suck so much omg
  (global-set-key (kbd "C-c e s") 'flymake-show-buffer-diagnostics) ; Error (diagnostics) show (project is also an option)
  (global-set-key (kbd "C-c e n") 'flymake-goto-next-error)         ; Error next
  (global-set-key (kbd "C-c e p") 'flymake-goto-prev-error)         ; Error previous

  (setq read-process-output-max (* 1024 1024)) 

  (setq-default indent-tabs-mode nil)                               ; Emacs mixes tabs and spaces (i didn't know there was an objectively bad option about the two)

  (direnv-mode 1)

  (setq epa-pinentry-mode 'loopback) 
  (pinentry-start)

  (rainbow-delimiters-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (setopt display-fill-column-indicator-column 80)

                                          ; (Ma)Git / Forge
  (global-set-key (kbd "C-c g") 'magit)
  (with-eval-after-load 'magit
    (require 'forge))
  ;; Fixes bug with pressing RET inside C-:
  (with-eval-after-load 'paredit-mode
    (define-key paredit-mode-map (kbd "RET") nil))

#+end_src

=~/.authinfo.gpg= must be encrypted with my public key and contain what is said [[https://magit.vc/manual/forge/Setup-for-Githubcom.html][here]].
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg")) 
#+end_src

**** Per language
***** Rust
#+begin_src emacs-lisp
  (add-hook 'rust-mode-hook 'lsp-deferred) ; Enable lsp-mode when in rust buffers
  (setq lsp-keymap-prefix "C-c C-r") ; I checked, it was unbound (C-c ones are reserved for the user, apparently)
  (setq dap-auto-configure-features '(sessions locals controls tooltip)) ; debugging (i hope)
  ;(setq lsp-rust-analyzer-proc-macro-enable nil) ; proc-macro errors are annoying, especially in sqlx and such
  (add-hook 'rust-mode-hook 
            (lambda () (add-hook 'before-save-hook 'lsp-format-buffer))) 
#+end_src

***** Haskell
=haskell-mode= is stable and usable, whereas =lsp-haskell= is newer but under development and not ready for general use. 
#+begin_src emacs-lisp
  (add-hook 'haskell-mode-hook #'lsp-deferred)
  (add-hook 'haskell-literate-mode-hook #'lsp-deferred)
  (add-hook 'haskell-mode-hook #'hindent-mode)
                                          ;(add-hook 'haskell-mode-hook #'interactive-haskell-mode)
                                          ;(setq haskell-interactive-popup-errors nil) ; Make C-c C-l errors usable
#+end_src

***** C(++)
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp-deferred)
  (add-hook 'c++-mode-hook 'lsp-deferred)

  (global-set-key (kbd "C-c C-c") 'compile)
  (with-eval-after-load 'cc-mode
    (define-key c-mode-base-map (kbd "C-c C-c") nil) 
    (define-key c-mode-base-map (kbd "C-c C-c") 'compile))
#+end_src

***** Elm
#+begin_src emacs-lisp
  (add-hook 'elm-mode-hook 'lsp-deferred)
#+end_src

***** Uiua
#+begin_src emacs-lisp
  (load
    (file-name-concat
     (file-name-directory user-init-file)
     "casuiua-mode.el"))
  ; TODO: uiua-base-mode hook doesn't exist, it should be casuiua-mode
  ;;(add-hook 'uiua-base-mode-hook (lambda () (setq buffer-face-mode-face '(:family "Uiua386")) (buffer-face-mode)))
#+end_src

***** BQN
#+begin_src emacs-lisp
  (defun cas/set-font-to-uiua ()
    (setq buffer-face-mode-face '(:family "Uiua386"))
    (buffer-face-mode))
  (add-hook 'bqn-mode-hook 'cas/set-font-to-uiua)
  (add-hook 'bqn-comint-mode-hook 'cas/set-font-to-uiua)
#+end_src

***** Common Lisp
#+begin_src emacs-lisp
   ;; (defun hyperspec-lookup--hyperspec-lookup-w3m (orig-fun &rest args)
   ;;   (let ((browse-url-browser-function 'w3m-browse-url))
   ;;     (apply orig-fun args)))
   ;; (advice-add 'hyperspec-lookup :around #'hyperspec-lookup--hyperspec-lookup-w3m)
  (use-package sly
    :config
    (define-key sly-mode-map (kbd "C-c C-d C-h") #'sly-documentation))
#+end_src
***** Lean4
#+begin_src emacs-lisp
  (add-to-list 'load-path
               (file-name-concat
                (file-name-directory user-init-file)
                "lean4-mode"))
  (load
   (file-name-concat
    (file-name-directory user-init-file)
    "lean4-mode/lean4-mode.el"))
#+end_src

*** Self-Documentation
Emacs really is self-documenting (and is the main reason I'm using it over *vim), this brings it closer to perfection by replacing emacs' help pages by using =helpful='s.

Note that the built-in `describe-function' includes both functions and macros. `helpful-function' is functions only, so this uses `helpful-callable' as a drop-in replacement.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)


  (setq ediff-split-window-function 'split-window-horizontally) 
  (setq ediff-window-setup-function 'ediff-setup-windows-plain) ; Ediff window inside of buffer


  (global-set-key (kbd "C-c f r") 'recentf-open-files)

  (setq company-minimum-prefix-length 1 ; Autocomplete and such
        company-idle-delay 0.0)         ; default is 0.2
#+end_src

*** Org-mode
Package loading:
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " โพ"))

  (custom-set-variables
   '(org-directory "~/org")
   '(org-agenda-files (list org-directory)))

  (setq org-default-notes-file (concat org-directory "/notes.org")) ; I found that user-emacs-directory exists (could be nicer)

  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?" :target
        (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)) ; for autocompleting names of notes
    :config
    (org-roam-setup)
    (setq org-M-RET-may-split-line '((default . nil)))
    (setq org-insert-heading-respect-content t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t))
#+end_src


General variables
#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence "TODO" "WAITING" "DONE")))
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

  (setq org-agenda-span 'month)
  (setq org-hide-leading-stars 't)
#+end_src

=org-appear= for selectively showing emphasis markers
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-appear-mode)

  (setq org-hide-emphasis-markers 't)

  (setq org-appear-autoemphasis 't) 
  (setq org-appear-autolinks 't)
  (setq org-appear-trigger 'always)
#+end_src

TODO: bind this to C-c n I
#+begin_src emacs-lisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src

Languages:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (haskell . t)
                                          ; (rust . t) i need to add 'ob-rust' or whatever, i don't want to deal with it rn
                                          ; (sh . t) ; TODO: all of these or whatever
                                          ; (sed . t)
                                          ; (awk . t)
     (emacs-lisp . t)))
#+end_src

**** Calendar
#+begin_src emacs-lisp
  (require 'calfw)
  (require 'calfw-org)
  (setq cfw:display-calendar-holidays 'nil)
  (global-set-key (kbd "M-C") 'cfw:open-org-calendar)

  (custom-set-faces
   '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
   '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
   '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
   '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
   '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
   '(cfw:face-grid ((t :foreground "DarkGrey")))
                                          ;'(cfw:face-default-content ((t :foreground "#bfebbf")))
   '(cfw:face-default-content ((t :foreground "green")))
   '(cfw:face-periods ((t :foreground "cyan")))
   '(cfw:face-day-title ((t :background "black")))
   '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
   '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
   '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
   '(cfw:face-today-title ((t :background "dark orange" :weight bold)))
   '(cfw:face-today ((t :background: "orange red" :weight bold)))
   '(cfw:face-select ((t :background "dark magenta")))
   '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
   '(cfw:face-toolbar-button-off ((t :foreground "light salmon" :weight bold)))
   '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))

#+end_src
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
  (setq diary-file (concat org-directory "/diary.org"))
  (setq calendar-date-style 'european)
  (setq diary-date-forms diary-european-date-forms)
#+end_src

*** Misc
I'm a big fan of knowing the dimensions of my highlight region, this displays it at the left of the modeline
#+begin_src emacs-lisp
  (defun mode-line-region-chars ()
    (if (use-region-p)
        (let ((characters (+ 1 (abs (- (region-end) (region-beginning)))))
              (lines (+ 1 (abs (- (line-number-at-pos (region-end))
                                  (line-number-at-pos (region-beginning)))))))
          (format "<%d,%d>" lines characters))
      "<_,_>"))


  (setq mode-line-misc-info
        (list '(:eval (mode-line-region-chars))))

  (add-hook 'post-command-hook
            (lambda ()
              (force-mode-line-update)))
#+end_src

#+begin_src emacs-lisp
  (defun sudo ()
    "Use TRAMP to `sudo` the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo::"
               buffer-file-name))))


                                          ; Set helm completion to be useful lmao
  (setq helm-completion-style 'emacs)
  (setq completion-styles '(flex))
#+end_src

#+begin_src emacs-lisp
  ;; For use in my todo, literally just inserts the date
  (defun cas/insert-date-header ()
    (interactive)
    (save-excursion (insert (format-time-string "# %Y-%m-%d (%A)" nil 'wall))))

  ;; The actual todo, for immediate access (and, through normal find-file, the rest)
  (defun cas/open-todo ()
    (interactive)
    (find-file "~/Nusos/Todo.md"))

  (global-set-key (kbd "C-c C-t") 'cas/open-todo)                        ; t for todo
  (define-key markdown-mode-map (kbd "C-c C-n") 'cas/insert-date-header) ; n for new (d and s were taken)
#+end_src

*** Elfeed
=cas-open-video-in-mpv= is the first proper function I wrote in elisp, fun fact. 
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x w") 'elfeed)
  (defun cas-open-video-in-mpv ()
    "Open provided youtube link with mpv, assuming mpv is in $PATH"
    (interactive)
    (let ((link (thing-at-point-url-at-point)))
      (if link
          (progn
            (message (format "Opening '%s' with mpv, hold tight..." link))
            (start-process "emacs-mpv-video-watch" "*mpv-video-watch*" "mpv" link))
        (message "No link found under point, could not open :c"))))

  (use-package elfeed
    :config
    (keymap-set elfeed-show-mode-map "C-c C-o" 'cas-open-video-in-mpv))
#+end_src

#+begin_src emacs-lisp
  (setq elfeed-feeds
        '("https://xkcd.com/rss.xml"
          ("https://planet.emacslife.com/atom.xml"                                        emacs programming)
          ("https://3blue1brown.substack.com/feed"                                        yt math)           ; 3b1b
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCs4fQRyl1TJvoeOdekW6lYA" yt programming)    ; fasterthanlime
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UC62oK4gTQtOE4DvAFbFlt9Q" yt games)          ; Shortcat
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxq5GS5pcR0SNazjC3qYQSQ" yt games)          ; Marblr
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCU9pX8hKcrx06XfOB-VQLdw" yt games)          ; xisumavoid
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCOmCxjmeQrkB5GmCEssbvxg" yt linux)          ; RobertElder
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCGaVdbSav8xWuFWTadK6loA" yt)                ; vlogbrothers
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtscFf8VayggrDYjOwDke_Q" yt)                ; Angela Collier
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCNSMdQtn1SuFzCZjfK2C7dQ" yt)                ; Fortnine
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCcXhhVwCT6_WqjkEniejRJQ" yt)                ; Wintergatan
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCm_dHxrHKK_fmoUgj9YnYqw" yt programming)    ; Truttle1
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCl2mFZoRqjw_ELax4Yisf6w" yt)                ; Louis rossman
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2C_jShtL725hvbm1arSV9w" yt)                ; CGP Grey
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnHX5FjwtQpxkCGziuh4NJA" yt programming)    ; Logan Smith
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCmMubqzMeJDrW7u6d4SJh-Q" yt queer)          ; a_lilian
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UChLACeik8p6fqzpk9uLjdbw" yt)                ; owiebrainhurts
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJLZe_NoiG0hT7QCX_9vmqw" yt)                ; I did a thing
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCgqt1RE0k0MIr0LoyJRy2lg" yt)                ; Rational Animations
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCwbRile4jo-LcW_PQwmMdBw" yt)                ; Captain KRB
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCaay7_gi9Fq6WwWopuYHpug" yt)                ; All Things Physics
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCOGeU-1Fig3rrDjhm9Zs_wg" yt)                ; Vihart
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCMiyV_Ib77XLpzHPQH_q0qQ" yt)                ; Veronica Explains
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsbmzVl1byLQmc79Ff4xgIg" yt)                ; Veronica Explains Nothing
          )) ; These parens are here because I keep adding feeds
#+end_src






